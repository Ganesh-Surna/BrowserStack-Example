{"ast":null,"code":"\"use client\";\n\n// src/HydrationBoundary.tsx\nimport * as React from \"react\";\nimport { hydrate } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nvar HydrationBoundary = function HydrationBoundary(_ref) {\n  var children = _ref.children,\n    _ref$options = _ref.options,\n    options = _ref$options === void 0 ? {} : _ref$options,\n    state = _ref.state,\n    queryClient = _ref.queryClient;\n  var client = useQueryClient(queryClient);\n  var optionsRef = React.useRef(options);\n  optionsRef.current = options;\n  React.useMemo(function () {\n    if (state) {\n      hydrate(client, state, optionsRef.current);\n    }\n  }, [client, state]);\n  return children;\n};\nexport { HydrationBoundary };","map":{"version":3,"names":["React","hydrate","useQueryClient","HydrationBoundary","_ref","children","_ref$options","options","state","queryClient","client","optionsRef","useRef","current","useMemo"],"sources":["C:\\Users\\GaneshSurna\\Desktop\\New React\\Practice_routes\\node_modules\\@tanstack\\react-query\\src\\HydrationBoundary.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { HydrateOptions, QueryClient } from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(client, state, optionsRef.current)\n    }\n  }, [client, state])\n\n  return children as React.ReactElement\n}\n"],"mappings":";;;AACA,YAAYA,KAAA,MAAW;AAEvB,SAASC,OAAA,QAAe;AACxB,SAASC,cAAA,QAAsB;AAUxB,IAAMC,iBAAA,GAAoB,SAApBA,kBAAAC,IAAA,EAKiB;EAAA,IAJ5BC,QAAA,GAAAD,IAAA,CAAAC,QAAA;IAAAC,YAAA,GAAAF,IAAA,CACAG,OAAA;IAAAA,OAAA,GAAAD,YAAA,cAAU,CAAC,IAAAA,YAAA;IACXE,KAAA,GAAAJ,IAAA,CAAAI,KAAA;IACAC,WAAA,GAAAL,IAAA,CAAAK,WAAA;EAEA,IAAMC,MAAA,GAASR,cAAA,CAAeO,WAAW;EAEzC,IAAME,UAAA,GAAmBX,KAAA,CAAAY,MAAA,CAAOL,OAAO;EACvCI,UAAA,CAAWE,OAAA,GAAUN,OAAA;EAMfP,KAAA,CAAAc,OAAA,CAAQ,YAAM;IAClB,IAAIN,KAAA,EAAO;MACTP,OAAA,CAAQS,MAAA,EAAQF,KAAA,EAAOG,UAAA,CAAWE,OAAO;IAC3C;EACF,GAAG,CAACH,MAAA,EAAQF,KAAK,CAAC;EAElB,OAAOH,QAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}